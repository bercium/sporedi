<?php

/**
 * This is the model base class for the table "show".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Show".
 *
 * Columns in table "show" available as properties of the model,
 * followed by relations of table "show" available as properties of the model.
 *
 * @property integer $id
 * @property string $slug
 * @property string $title
 * @property string $original_title
 * @property string $description
 * @property string $country
 * @property integer $year
 * @property integer $custom_category_id
 * @property integer $custom_genre_id
 * @property integer $season
 * @property integer $episode
 * @property string $imdb_url
 * @property integer $imdb_rating
 * @property integer $imdb_rating_count
 * @property string $imdb_parsed
 * @property integer $imdb_verified
 * @property string $trailer
 * @property string $modified
 *
 * @property Schedule[] $schedules
 * @property CustomGenre $customGenre
 * @property CustomCategory $customCategory
 * @property Person[] $people
 */
abstract class BaseShow extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'show';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Show|Shows', $n);
	}

	public static function representingColumn() {
		return 'slug';
	}

	public function rules() {
		return array(
			array('slug', 'required'),
			array('year, custom_category_id, custom_genre_id, season, episode, imdb_rating, imdb_rating_count, imdb_verified', 'numerical', 'integerOnly'=>true),
			array('slug, title, imdb_url', 'length', 'max'=>256),
			array('original_title', 'length', 'max'=>512),
			array('description', 'length', 'max'=>5000),
			array('country', 'length', 'max'=>100),
            array('trailer', 'length', 'max'=>255),
			array('imdb_parsed, modified', 'safe'),
			array('title, original_title, description, country, year, custom_category_id, custom_genre_id, season, episode, imdb_url, imdb_rating, imdb_rating_count, imdb_parsed, imdb_verified', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, slug, title, original_title, description, country, year, custom_category_id, custom_genre_id, season, episode, imdb_url, imdb_rating, imdb_rating_count, imdb_parsed, imdb_verified, modified', 'safe', 'on'=>'search'),
            array('modified', 'default', 'value'=>new CDbExpression('NOW()'), 'setOnEmpty' => false, 'on' => 'insert'),
            array('modified', 'default', 'value' => new CDbExpression('NOW()'), 'setOnEmpty' => false, 'on' => 'update'),
		);
	}

	public function relations() {
		return array(
			'schedules' => array(self::HAS_MANY, 'Schedule', 'show_id'),
			'customGenre' => array(self::BELONGS_TO, 'CustomGenre', 'custom_genre_id'),
			'customCategory' => array(self::BELONGS_TO, 'CustomCategory', 'custom_category_id'),
			'directors' => array(self::MANY_MANY, 'Person', 'show_director(show_id, person_id)'),
			'actors' => array(self::MANY_MANY, 'Person', 'show_actor(show_id, person_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'people' => 'ShowDirector',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'slug' => Yii::t('app', 'Slug'),
			'title' => Yii::t('app', 'Title'),
			'original_title' => Yii::t('app', 'Original Title'),
			'description' => Yii::t('app', 'Description'),
			'country' => Yii::t('app', 'Country'),
			'year' => Yii::t('app', 'Year'),
			'custom_category_id' => null,
			'custom_genre_id' => null,
			'season' => Yii::t('app', 'Season'),
			'episode' => Yii::t('app', 'Episode'),
			'imdb_url' => Yii::t('app', 'Imdb Url'),
			'imdb_rating' => Yii::t('app', 'Imdb Rating'),
			'imdb_rating_count' => Yii::t('app', 'Imdb Rating Count'),
			//'repaired' => Yii::t('app', 'Repaired'),
			'imdb_parsed' => Yii::t('app', 'Imdb Parsed'),
			'imdb_verified' => Yii::t('app', 'Imdb Verified'),
			'trailer' => Yii::t('app', 'Trailer'),
			'schedules' => null,
			'customGenre' => null,
			'customCategory' => null,
			'people' => null,
            'modified' =>null
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('slug', $this->slug, true);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('original_title', $this->original_title, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('country', $this->country, true);
		$criteria->compare('year', $this->year);
		$criteria->compare('custom_category_id', $this->custom_category_id);
		$criteria->compare('custom_genre_id', $this->custom_genre_id);
		$criteria->compare('season', $this->season);
		$criteria->compare('episode', $this->episode);
		$criteria->compare('imdb_url', $this->imdb_url, true);
		$criteria->compare('imdb_rating', $this->imdb_rating);
		$criteria->compare('imdb_rating_count', $this->imdb_rating_count);
		//$criteria->compare('repaired', $this->repaired);
		$criteria->compare('imdb_parsed', $this->imdb_parsed, true);
		$criteria->compare('imdb_verified', $this->imdb_verified);
		$criteria->compare('trailer', $this->trailer, true);
        $criteria->compare('modified', $this->modified, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}